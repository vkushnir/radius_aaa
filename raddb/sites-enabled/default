######################################################################
#
#	As of 2.0.0, FreeRADIUS supports virtual hosts using the
#	"server" section, and configuration directives.
#
#	Virtual hosts should be put into the "sites-available"
#	directory.  Soft links should be created in the "sites-enabled"
#	directory to these files.  This is done in a normal installation.
#
#	If you are using 802.1X (EAP) authentication, please see also
#	the "inner-tunnel" virtual server.  You wll likely have to edit
#	that, too, for authentication to work.
#
#	$Id$
#
######################################################################
#
#	Read "man radiusd" before editing this file.  See the section
#	titled DEBUGGING.  It outlines a method where you can quickly
#	obtain the configuration you want, without running into
#	trouble.  See also "man unlang", which documents the format
#	of this file.
#
#	This configuration is designed to work in the widest possible
#	set of circumstances, with the widest possible number of
#	authentication methods.  This means that in general, you should
#	need to make very few changes to this file.
#
#	The best way to configure the server for your local system
#	is to CAREFULLY edit this file.  Most attempts to make large
#	edits to this file will BREAK THE SERVER.  Any edits should
#	be small, and tested by running the server with "radiusd -X".
#	Once the edits have been verified to work, save a copy of these
#	configuration files somewhere.  (e.g. as a "tar" file).  Then,
#	make more edits, and test, as above.
#
#	There are many "commented out" references to modules such
#	as ldap, sql, etc.  These references serve as place-holders.
#	If you need the functionality of that module, then configure
#	it in radiusd.conf, and un-comment the references to it in
#	this file.  In most cases, those small changes will result
#	in the server being able to connect to the DB, and to
#	authenticate users.
#
######################################################################

#
#	In 1.x, the "authorize", etc. sections were global in
#	radiusd.conf.  As of 2.0, they SHOULD be in a server section.
#
#	The server section with no virtual server name is the "default"
#	section.  It is used when no server name is specified.
#
#	We don't indent the rest of this file, because doing so
#	would make it harder to read.
#

#  Authorization. First preprocess (hints and huntgroups files),
#  then realms, and finally look in the "users" file.
#
#  Any changes made here should also be made to the "inner-tunnel"
#  virtual server.
#
#  The order of the realm modules will determine the order that
#  we try to find a matching realm.
#
#  Make *sure* that 'preprocess' comes before any realm if you 
#  need to setup hints for the remote radius server
authorize {	
	#
	#  Security settings.  Take a User-Name, and do some simple
	#  checks on it, for spaces and other invalid characters.  If
	#  it looks like the user is trying to play games, reject it.
	#
	#  This should probably be enabled by default.
	#
	#  See policy.conf for the definition of the filter_username policy.
	#
#	filter_username
	#
	#  The preprocess module takes care of sanitizing some bizarre
	#  attributes in the request, and turning them into attributes
	#  which are more standard.
	#
	#  It takes care of processing the 'raddb/hints' and the
	#  'raddb/huntgroups' files.
		
	preprocess
	
	update request { 
		NAS-Vendor-Type := "%{sql:SELECT nasvendortype FROM $ENV{VENDOR} WHERE nasipaddress='%{NAS-IP-Address}'}"
		Huntgroup-Name := "%{sql:SELECT groupname FROM $ENV{HUNTGROUP} WHERE nasipaddress='%{NAS-IP-Address}'}"
	}
	if("%{NAS-Vendor-Type}" == "") {
		update reply {
			Reply-Message := "Device type failed! Please check $ENV{VENDOR} for nasipaddress:'%{NAS-IP-Address}'."
		}
		reject
	}
	if("%{Huntgroup-Name}" == "") {
		update reply {
			Reply-Message := "Device group failed! Please check $ENV{VENDOR} for nasipaddress:'%{NAS-IP-Address}'."
		}
		reject
	}
	#
	#  If you want to have a log of authentication requests,
	#  un-comment the following line, and the 'detail auth_log'
	#  section, above.
	auth_log

#	chap
#	mschap
#	digest
#	wimax
#	IPASS
#	suffix
#	ntdomain
#	eap {
#		ok = return
#	}
#	unix
	files

	#  Check user in SQL database
	sql {
		notfound = 1
		reject = 2
    }
	if(notfound) {
		update reply {
			Reply-Message := "Login Failed! Please check your Username and Password."
		}
		reject
	}
	if(reject) {
		update reply {
			Reply-Message := "Login Failed! Please check your Username and Password."
        }
        reject
	}

#	smbpasswd
#	ldap
#	daily
	
	# Check user can access to Huntgroup
	if (!control:Huntgroup-Name) {
		update reply {
			Reply-Message := "Sorry, your account '%{User-Name}' is not allowed to access this device."
		}
		reject
	}
	
	# Check user expired
	expiration {
		userlock = 1
    }
#    if(userlock) {
#		update reply {
#			Reply-Message := "Your account has expired, %{User-Name}."
#		}
#		reject
#	}

	logintime

	#
	#  If no other module has claimed responsibility for
	#  authentication, then try to use PAP.  This allows the
	#  other modules listed above to add a "known good" password
	#  to the request, and to do nothing else.  The PAP module
	#  will then see that password, and use it to do PAP
	#  authentication.
	#
	#  This module should be listed last, so that the other modules
	#  get a chance to set Auth-Type for themselves.
	#
	pap

	#
	#  If "status_server = yes", then Status-Server messages are passed
	#  through the following section, and ONLY the following section.
	#  This permits you to do DB queries, for example.  If the modules
	#  listed here return "fail", then NO response is sent.
	#
#	Autz-Type Status-Server {
#
#	}
}


#  Authentication.
#
#

authenticate {
	Auth-Type PAP {
		pap
	}
#	Auth-Type CHAP {
#		chap
#	}
#	Auth-Type MS-CHAP {
#		mschap
#	}
#	digest
#	pam
#	unix
#	Auth-Type LDAP {
#		ldap
#	}
#	eap
#	Auth-Type eap {
#		eap {
#			handled = 1  
#		}
#		if (handled && (Response-Packet-Type == Access-Challenge)) {
#			attr_filter.access_challenge.post-auth
#			handled  # override the "updated" code from attr_filter
#		}
#	}
}


#
#  Pre-accounting.  Decide which accounting type to use.
#
preacct {
	preprocess
#	IPASS
	suffix
#	ntdomain
	files
}

#
#  Accounting.  Log the accounting data.
#
accounting {
	detail
#	daily
#	unix
#	radutmp
#	sradutmp
#	main_pool
	#  Accounting in SQL
	sql
#	if (noop) {
#		ok
#	}
#	sql_log
	exec
	attr_filter.accounting_response
#	Acct-Type Status-Server {
#
#	}
}


#  Session database, used for checking Simultaneous-Use. Either the radutmp 
#  or rlm_sql module can handle this.
#  The rlm_sql module is *much* faster
session {
	radutmp
	#  See "Simultaneous Use Checking Queries" in sql.conf
	sql
}


#  Post-Authentication
#  Once we KNOW that the user has been authenticated, there are
#  additional steps we can take.
post-auth {
#	main_pool
#	reply_log
	#  See "Authentication Logging Queries" in sql.conf
	sql
#	sql_log
#	ldap
	exec
#	wimax

	Post-Auth-Type REJECT {
		# log failed authentications in SQL, too.
		sql
		eap
		update reply {
			Reply-Message = "Login Failed! Please check your username and password."
		}
		attr_filter.access_reject
	}
}

#
#  When the server decides to proxy a request to a home server,
#  the proxied request is first passed through the pre-proxy
#  stage.  This stage can re-write the request, or decide to
#  cancel the proxy.
#
#  Only a few modules currently have this method.
#
pre-proxy {
#	attr_rewrite
#	files
#	attr_filter.pre-proxy
#	pre_proxy_log
}

#
#  When the server receives a reply to a request it proxied
#  to a home server, the request may be massaged here, in the
#  post-proxy stage.
#
post-proxy {
#	post_proxy_log
#	attr_rewrite
#	attr_filter.post-proxy
	eap

#	Post-Proxy-Type Fail {
#			detail
#	}
}

